i have a dockerfile defining a node app on centos
and another container with mongo that is linked in
now i'm trying to figure out how to connect nginx into that..

So you want to have nginx i.e load balance between these tow?
You can have nginx as seprate container, nginx has docker image published on docker hub you can use that. 
Once you have exposed port nginx can connect to the docker container with hostname of docker
and if nginx is outside docker in that case you need to connect to those docker container with hostname 
where those containers are deployed and yes port has to published.


do you have any Docker apps in production? Debating how to handle storage. 
Teammate has an idea to have a physical server (not docker) mount point of /opt/php/repo and have the docker container mount this.
This physical mount point will have the code repo. Not sure how I feel about that yet

Still early in my docker days so don't have production stuff yet, 
pointing a docker container to use a volume in /opt/php/repo shouldn't be an issue, 
just have to double check the uid mappings if you also want to manage that on the host.


Docker stop
https://www.ctl.io/developers/blog/post/gracefully-stopping-docker-containers/
Things would be easy if you simply started a container and it ran forever, 
but there's a good chance that your application will need to be stopped and 
restarted at some point to facilitate an upgrade or a migration to another host.
For those times when you need to stop a running container, 
it would be preferable if the process could shutdown smoothly instead of abruptly disconnecting users and corrupting files.

When you issue a docker stop command Docker will first ask nicely for the process to stop and if it doesn't comply within 10 seconds
it will forcibly kill it. 
If you've ever issued a docker stop and had to wait 10 seconds for the command to return you've seen this in action

The docker stop command attempts to stop a running container first by sending a 
SIGTERM signal to the root process (PID 1) in the container. If the process hasn't
exited within the timeout period a SIGKILL signal will be sent.

Whereas a process can choose to ignore a SIGTERM, a SIGKILL goes straight to the kernel which will terminate the process.
The process never even gets to see the signal.

When using docker stop the only thing you can control is the number of seconds that the Docker daemon will wait before sending the SIGKILL:

docker stop ----time=30 foo

Docker login using a file
https://stackoverflow.com/questions/51489359/docker-using-password-via-the-cli-is-insecure-use-password-stdin
1) How do we automate add more instances to the ecs cluster?
2) Services are running but the target group health status is unhealthy and shows health check failed why?
3) While registering new instances to target groups should we need to provide the unique port number or use the default one?
4) Do the ecs cluster use the number of instances mentioned while creating cluster for the whole number of services?
Means if the number of instances mentioned is 2 then it will only use two instances allover the services? Or when we need to add more instances while adding new services or it will automatically spin up two instances?

ECS understand
https://www.youtube.com/watch?v=46mFdtpy3NQ
https://www.youtube.com/watch?v=3Kr_455zMk4
